<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erik Silver</title>
    <atom:link href="http://eriksilver.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://eriksilver.github.io/</link>
    <description>A personal portfolio and blog website focusing on front end development and Shopify</description>
    <pubDate>Tue, 12 Jan 2016 13:14:24 -0600</pubDate>
    
      <item>
        <title>How to deploy an app from scratch with Heroku, using Node and Express</title>
        <link>http://eriksilver.github.io/blog/How-to-deploy-an-app-from-scratch-with-Heroku-using-Node-and-Express</link>
        <guid isPermaLink="true">http://eriksilver.github.io/blog/How-to-deploy-an-app-from-scratch-with-Heroku-using-Node-and-Express</guid>
        <description>&lt;p&gt;This post shares the steps to take an application and deploy it as a web application with Heroku. It details the files and steps required for Heroku and Express to launch the app.&lt;/p&gt;

&lt;p&gt;In a previous &lt;a href=&quot;http://eriksilver.github.io/blog/How-to-serve-static-files-with-Node-and-Express-without-a-templating-engine/&quot;&gt;post&lt;/a&gt;, I shared a detailed example of how to setup Express with Node.js to serve an application.&lt;/p&gt;

&lt;p&gt;These are the these steps I used to publish an Angular app, the Event Management System. A link to the full Github repo is at the bottom.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If your using Git for your project, make a new branch:&lt;br /&gt;
&lt;code&gt;git checkout -b new_branch_name&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a Procfile in the project root directory. Heroku will look for a Procfile to deploy the app.The contents of the Procfile is one line: web:  &lt;code&gt;node server.js&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;touch Procfile&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a server.js file in the project root directory. This file will use Express to setup the server. In my Node + Express &lt;a href=&quot;http://eriksilver.github.io/blog/How-to-serve-static-files-with-Node-and-Express-without-a-templating-engine/&quot;&gt;post&lt;/a&gt;, I go into detail about setting up the server.js file.&lt;br /&gt;
&lt;code&gt;touch server.js&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a package.json file which Node.js (npm) uses to identify the project and specifies how to handle the projects dependencies. Heroku will look for a package.json file as well to build the deployment.&lt;br /&gt;
&lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Express, which is web framework for Node.js that will help setup the server. The ‘–save’ flag will save Express as dependency for the application in the package.json file.&lt;br /&gt;
&lt;code&gt;npm install express --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrange files - based on how the server.js file is setup, I have the files used in the “view” in a Public folder. Move your application/view files to a Public folder.&lt;br /&gt;
Note: Express needs to remain in root directory as well as the server.js, Procfile, and package.json files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the app! To run locally, use ‘npm start’.&lt;br /&gt;
&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When app is working and running locally, merge branch to master.&lt;br /&gt;
&lt;code&gt;git checkout master&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git merge new_branch_name&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, Heroku. Assuming you have the Heroku toolbelt installed, you can run ‘heroku create’ to spin up a new Heroku app.&lt;br /&gt;
&lt;code&gt;heroku create&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you git respository is connected to Heroku as well. Check ‘git remote -v’. Assuming you’re good to go, push your local repo, you most up-to-date version of the codebase to Heroku.&lt;br /&gt;
&lt;code&gt;git push heroku master&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the Heroku server is ready.&lt;br /&gt;
&lt;code&gt;heroku ps:scale web=1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Launch your app on the web!&lt;br /&gt;
&lt;code&gt;heroku open&lt;/code&gt;&lt;br /&gt;
or depending on how your remotes are setup:&lt;br /&gt;
&lt;code&gt;heroku open --app heroku_app_name&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out the repo &lt;a href=&quot;https://github.com/eriksilver/Events-CMS&quot;&gt;here&lt;/a&gt; if you want to reference the files.&lt;/p&gt;

&lt;p&gt;How do you spin up a Node + Express server?&lt;/p&gt;

&lt;p class=&quot;meta&quot;&gt;
    
&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jan 2016 00:00:00 -0600</pubDate>
      </item>
    
      <item>
        <title>Replacing Shopify Collection drop down filters with radio buttons</title>
        <link>http://eriksilver.github.io/blog/Replacing-Shopify-Collection-drop-down-filters-with-radio-buttons</link>
        <guid isPermaLink="true">http://eriksilver.github.io/blog/Replacing-Shopify-Collection-drop-down-filters-with-radio-buttons</guid>
        <description>&lt;h1 id=&quot;shopify-collection-filters&quot;&gt;Shopify Collection Filters&lt;/h1&gt;
&lt;p&gt;A client’s site had drop down filters for their product tags. The radio buttons offer a better user experience and a better aesthetic.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;The page originally looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/jewelry-dropdown.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;And with radio buttons, the filtering looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/jewelry-radio.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The original implementation using the drop down displays all product tags available and then when a user selects a tag, jQuery is used to add that tag to the url handle using ‘window.location.href’. That will reload the page with the tag filter in place. The url will look like this if the “rings” tag is selected: www.supermarkethq.com/collections/jewelry/rings
To learn more about how Shopify filters and uses the url, see this &lt;a href=&quot;http://eriksilver.github.io/blog/How-to-work-with-Shopify-Collection-Filters-and-their-limitations&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-filter-with-radio-buttons&quot;&gt;How to filter with radio buttons&lt;/h2&gt;
&lt;p&gt;The radio button implementation is more complex and includes additional elements:
* Custom collection filters - assigns the tags/radio filters for each collection - way to subcategorize a collection.
* Refactor the selector to an input and add additional CSS classes for the radio buttons
* Add logic to check if a radio button is selected - only one can be selected at a time&lt;/p&gt;

&lt;p&gt;Here is a look at the final radio button code:
&lt;script src=&quot;https://gist.github.com/57acc1a8330a8d8dff50.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;What questions do you have about Shopify collection and product filters?&lt;/p&gt;

&lt;p&gt;Contact me &lt;a href=&quot;http://eriksilver.github.io/contact&quot;&gt;here&lt;/a&gt; if you want to chat about your project needs.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 00:00:00 -0600</pubDate>
      </item>
    
      <item>
        <title>How to work with Shopify Collection Filters and their limitations</title>
        <link>http://eriksilver.github.io/blog/How-to-work-with-Shopify-Collection-Filters-and-their-limitations</link>
        <guid isPermaLink="true">http://eriksilver.github.io/blog/How-to-work-with-Shopify-Collection-Filters-and-their-limitations</guid>
        <description>&lt;h1 id=&quot;shopify-collection-filters&quot;&gt;Shopify Collection Filters&lt;/h1&gt;
&lt;p&gt;A client that was designing a new store reached out for help to understand how Shopify collection and product filters work and their inherent limitations.&lt;/p&gt;

&lt;p&gt;The overview below explains Shopify’s “native” product filtering. If you are looking for something different or a customized solution, let’s talk to understand what your project needs.&lt;/p&gt;

&lt;h1 id=&quot;shopify-product-filters--categorization&quot;&gt;Shopify Product Filters &amp;amp; Categorization:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Products can be organized first by Collections and then by product Tags. Product tags are used as Filters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Shopify filters are only for “refinement”, that is, they chain filter tags together with an “and” so that when multiple filters are selected the products remaining must meet the criteria for the first filter AND the second filter AND the third filter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each Collection has it’s own URL. For example, a jewelry collection on this gifting website would be found at the url: www.supermarkethq.com/collections/jewelry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Shopify has a three filter limit. For example, if looking at jewelry, three filters would be 1) a necklace, 2) that is gold, and 3) is over 20 inches long. The url in this case would look like www.website.com/collections/jewelry+necklace+gold+over20/.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you can see, Shopify uses the url for filtering, which means each time a filter is selected there is a page refresh. Depending on the speed of your site, this can affect the user experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another limitation to keep in mind is if you have a large product catalog, Shopify has a limitation to display 50 products at one time. If you have a large collection you will likely want to implement pagination for your collections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many Shopify themes default to drop down boxes for filtering. For a client we designed a modified version that uses radio buttons. Check out this post that gets into the code and gritty details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a Shopify &lt;a href=&quot;https://docs.shopify.com/support/your-store/collections/filtering-a-collection-with-multiple-tag-drop-down&quot;&gt;article&lt;/a&gt; with more details about their filtering system and a &lt;a href=&quot;http://satterfield-pfeffer5655.myshopify.com/collections/all&quot;&gt;demo shop&lt;/a&gt; to try out the filters for yourself.&lt;/p&gt;

&lt;p&gt;What questions do you have about Shopify product filters?&lt;/p&gt;

&lt;p&gt;Contact me &lt;a href=&quot;http://eriksilver.github.io/contact&quot;&gt;here&lt;/a&gt; if you want to talk Shopify filters.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Nov 2015 00:00:00 -0600</pubDate>
      </item>
    
      <item>
        <title>How to serve static files with Node and Express, without a templating engine</title>
        <link>http://eriksilver.github.io/blog/How-to-serve-static-files-with-Node-and-Express-without-a-templating-engine</link>
        <guid isPermaLink="true">http://eriksilver.github.io/blog/How-to-serve-static-files-with-Node-and-Express-without-a-templating-engine</guid>
        <description>&lt;p&gt;This example uses Node + Express to serve static files for an Angular app, without using
an Express templating engine.&lt;/p&gt;

&lt;p&gt;Some examples for setting up an Express server with a Node app, include
the use of Jade as a templating engine. This is app does not use a templating engine and I didn’t want to add one. I had my views as plain html files.&lt;/p&gt;

&lt;p&gt;I found it hard to find an example of the simple case of a single page application, an Angular app, find a good example of setting up Express.&lt;/p&gt;

&lt;p&gt;So I pieced together clues from Stack Overflow and looked at the Express API directly to
put together a simple server setup for this Angular app, a single page application.&lt;/p&gt;

&lt;p&gt;One tricky part was figuring out the res.sendFile and getting the file directly and entry point file properly identified. The entry point for this app is the index.html; that is the only page the server points to and then Angular handles the routing.&lt;/p&gt;

&lt;p&gt;I had to restructure my files, that is, get the right files in the public directory.
Here is what the files structure looks like:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/gaApp-files.jpg&quot; alt=&quot;Angular App file structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is my final server.js file, with comments.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Use/&amp;#39;require&amp;#39; the Node module &amp;#39;Express&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Define variable app to use methods of the Express function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//express.static is built-in middleware to server static files, &amp;#39;public&amp;#39; is the name of the directory&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//that holds the files to published&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//define a port&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//the listen method binds and listens for connections on the specified host and port&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//using just &amp;quot;port&amp;quot; will work locally; but to deploy on Heroku, I had to use&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;quot;process.env.PORT || 8000&amp;quot; because Heroku will set the port randomly&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app listening on port &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Routes HTTP GET requests to the specified path with the specified callback functions&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//here &amp;#39;*&amp;#39; is the path we want to get, which is a catch-all route&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//since we have a single page application (SPA) architecture, we are using Angular&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//to do the routing and we just need the Express server to have a single entry point into the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//application, which is through the index.html file&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//__dirname is a special word to access the local file + public/index.html is the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//directory for the published files&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//the sendFile method transfers the file that is the single point of entry&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Transfers the file at the given path.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/public/index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How do you serve your apps with Node and Express?&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Seven Ways to Serve Your App</title>
        <link>http://eriksilver.github.io/2015/06/14/Static-Server-Options.html</link>
        <guid isPermaLink="true">http://eriksilver.github.io/2015/06/14/Static-Server-Options.html</guid>
        <description>&lt;h2 id=&quot;seven-simple-ways-to-serve-your-new-app&quot;&gt;Seven Simple Ways to Serve Your New App&lt;/h2&gt;

&lt;p&gt;For a project I was working on recently I needed a way to deploy my static files. I didn’t have a server built into my project (yet), but I needed to review my site locally and share it on the web.&lt;/p&gt;

&lt;p&gt;Static vs Dynamic Sites?
Static sites can be served from your computer or a static site generator (e.g. Github Pages)
* An example is this blog.
Static sites serve content directly from the file-system (which is built via the site-generator).
An advantage of static sites is speed and simplicity because the files are ready in the file-system.&lt;/p&gt;

&lt;p&gt;Dynamic sites require a web server
* An example is a Wordpress site which needs PHP and MySQL to run on the server.
Dynamic sites generate content from the server with each page request.
They can perform slower and are more error prone because files are repeatedly being generated by the server.
A primer on static vs dynamic sites is &lt;a href=&quot;http://nilclass.com/courses/what-is-a-static-website/#29&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;spin-up-a-simple-http-serverhttpsgithubcomindexzerohttp-server&quot;&gt;Spin up a simple &lt;a href=&quot;https://github.com/indexzero/http-server&quot;&gt;http-server&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is a simple, no configuration server that can be installed with npm.
*  Run from the command line $: &lt;code&gt;http-server&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;simple-python-serverhttpwwwpythonforbeginnerscommodules-in-pythonhow-to-use-simplehttpserver&quot;&gt;Simple &lt;a href=&quot;http://www.pythonforbeginners.com/modules-in-python/how-to-use-simplehttpserver/&quot;&gt;python server&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python includes this simple server module with no configuration required.
* Run from the command line $: &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;bitballoon&quot;&gt;BitBalloon&lt;/h3&gt;
&lt;p&gt;One of my favorite simple hosting sites. Free and paid options.&lt;br /&gt;
* Drag and drop your file folder to get &lt;a href=&quot;http://BitBalloon.com&quot;&gt;started&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;use-a-text-editor-with-a-built-in-server-or-live-preview-like-webstorm-or-bracketsiohttpwwwbracketsio&quot;&gt;Use a text editor with a built in server or live preview, like Webstorm or &lt;a href=&quot;http://www.brackets.io&quot;&gt;Brackets.io&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Brackets is a lightweight, open-source editor made by Adobe that is geared toward the design side of development. It includes a “Live Preview” option with Chrome that automatically updates your view as you code. I’ve heard good things, and I want to try this out soon!
* Install with Homebrew or download [here]((http://www.brackets.io):&lt;/p&gt;

&lt;h4 id=&quot;github-pageshttpspagesgithubcom&quot;&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A go-to source for static sites. Easy to setup and get started. Great for Jeykll blogs (like this one!).
* Get started &lt;a href=&quot;https://pages.github.com/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;herokuhttpwwwherokucom&quot;&gt;&lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Heroku is another go-to option for free hosting with their basic plan. While they are geared toward  dynamic websites, there are ways to use Heroku for static sites as well.
Here are a couple of options:
* Static sites built in &lt;a href=&quot;https://devcenter.heroku.com/articles/static-sites-ruby&quot;&gt;Ruby&lt;/a&gt;
* Tricking Heroku into thinking your static files are a &lt;a href=&quot;https://gist.github.com/wh1tney/2ad13aa5fbdd83f6a489&quot;&gt;PHP app&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;divshot&quot;&gt;Divshot&lt;/h4&gt;
&lt;p&gt;Divshot, now acquired by Firebase, specializes in static website hosting and is geared toward scaling web apps. They have good blog and a free plan to get you started.
I haven’t tried them yet, but it looks fantastic.
* Check them out &lt;a href=&quot;https://divshot.com/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you use to serve static sites?&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Jun 2015 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Front-End Tutorials</title>
        <link>http://eriksilver.github.io/2015/06/01/Front-End-Tutorials.html</link>
        <guid isPermaLink="true">http://eriksilver.github.io/2015/06/01/Front-End-Tutorials.html</guid>
        <description>&lt;h3 id=&quot;front-end-free-tutorials&quot;&gt;Front-End &lt;em&gt;Free&lt;/em&gt; Tutorials&lt;/h3&gt;

&lt;p&gt;I come across many interesting tutorials on the interwebs and I thought it would be helpful to keep track of them somewhere, other than in bookmarks, to dos, and notes.&lt;/p&gt;

&lt;p&gt;So here is a running list some interesting tutorials.&lt;/p&gt;

&lt;h4 id=&quot;learnjsdatahttplearnjsdatacom&quot;&gt;&lt;a href=&quot;http://learnjsdata.com/&quot;&gt;LearnJSData&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Manipulating data with Javascript&lt;/p&gt;

&lt;h4 id=&quot;scotchiohttpwwwscotchio&quot;&gt;&lt;a href=&quot;http://www.scotch.io/&quot;&gt;Scotch.io&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I’ve found many good short tutorials on Bootstrap and Angular from Scotch.&lt;/p&gt;

&lt;h4 id=&quot;code4startup---angular--firebasehttpscode4startupcomprojectsninja-learn-angularjs-firebase-by-cloning-udemy&quot;&gt;&lt;a href=&quot;https://code4startup.com/projects/ninja-learn-angularjs-firebase-by-cloning-udemy&quot;&gt;Code4Startup - Angular + Firebase&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Build an MVP with AngularJS + FireBase by cloning TaskRabbit&lt;/p&gt;

&lt;h4 id=&quot;airpair---angularjs--stripehttpswwwairpaircomjavascriptintegrating-stripe-into-angular-app&quot;&gt;&lt;a href=&quot;https://www.airpair.com/javascript/integrating-stripe-into-angular-app&quot;&gt;Airpair - AngularJS + Stripe&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;AngularJS App With Stripe Payments Integration&lt;/p&gt;

&lt;h4 id=&quot;learn-resthttprestelksteinorg&quot;&gt;&lt;a href=&quot;http://rest.elkstein.org/&quot;&gt;Learn REST&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Get the basics on REST and APIs&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2015 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>How to Create a Jekyll Blog with Poole (or Type Theme)</title>
        <link>http://eriksilver.github.io/2015/05/21/How-to-Jekyll-blog.html</link>
        <guid isPermaLink="true">http://eriksilver.github.io/2015/05/21/How-to-Jekyll-blog.html</guid>
        <description>&lt;h3 id=&quot;update-october-2015&quot;&gt;Update October 2015&lt;/h3&gt;
&lt;p&gt;I wanted a portfolio site in addition to a blog, so I found a new Jekyll theme to replace my original blog based on the &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole&lt;/a&gt; theme. Then I extended the Kami theme further and made my own customizations like the full blog page.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ease of modifying and extending a theme as well as the simple static site hosting are two of the beauties of using Jekyll.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-is-jekyll-anyway&quot;&gt;What is Jekyll, anyway?&lt;/h3&gt;
&lt;p&gt;Jekyll is a site generator for blogs that uses static (read: text) files. It will take a directory of text files and run them through 1) a converter (e.g. Markdown) and 2) a Liquid renderer and spit out a ready to publish website.&lt;/p&gt;

&lt;h3 id=&quot;what-is-poole&quot;&gt;What is Poole?&lt;/h3&gt;
&lt;p&gt;Poole calls itself a “diligent and noble steward” for building Jekyll sites, aka the “Jekyll Butler.” It is designed to make a clear setup path for a Jekyll site by providing a full plain Jekyll install with some examples pages, posts, templates, etc to get you up and running fast.&lt;/p&gt;

&lt;p&gt;It also has two design themes available Hyde and Lanyon (used on this site).&lt;/p&gt;

&lt;h3 id=&quot;super-fast-setup&quot;&gt;Super Fast Setup&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Go to the local directory for your new blog.&lt;/li&gt;
  &lt;li&gt;Copy the Poole repository from &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone the repository: &lt;code&gt;$ git clone https://github.com/poole/poole&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;This will create a ‘poole’ directory with all the files in it&lt;/li&gt;
  &lt;li&gt;User this Jekyll command to run locally in the browser: &lt;code&gt;$ jekyll serve&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details on &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;setup and installation&lt;/a&gt; are on Github.&lt;/p&gt;

&lt;h3 id=&quot;customizations&quot;&gt;Customizations&lt;/h3&gt;
&lt;p&gt;Archive Page
I like some of the customizations done by by &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;Joshua Lande&lt;/a&gt;, like the Archive page. So I wanted to set one up on my Poole blog.
To do this, I created an ‘archive.md’ file and saved it in the blog directory.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;I found this faster and prettier than working through the setup instructions from &lt;a href=&quot;www.jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;.
Also, I liked starting with theme that already incorporates some design, and the theme code and design is totally customizable.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 May 2015 00:00:00 -0500</pubDate>
      </item>
    
  </channel>
</rss>
